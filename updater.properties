# Example updater.properties.
# The actual gradle will first try its own directory to see if `updater.properties` exists, then try a level up.
# As such, you should make sure this is either directly in the project you intend to update, or just a level deep as a submodule.
# If a key begins with '$', it marks a put to metadata.
# If a value begins with '$', it marks a get from metadata.
# If a value begins with '@', it pulls from the named repository.
# Metadata for which repositories.
@fabric=https://maven.fabricmc.net/
@maven=https://repo.maven.apache.org/maven2/
@oss.sonatype=https://oss.sonatype.org/content/repositories/snapshots
@default=@maven
# Target minecraft version to target, maybe omitted.
$minecraft.target=1.16.5
# Snapshot version, for `${minecraft.snapshot}-alpha.$Y.$W.$B`.
$minecraft.snapshot=1.17
# What modding API are you working with? [fabric]
$modding.api=fabric
# Properties to check for updates in.
$properties=gradle.properties
# If this should be recursive.
$recursive=false
# If this should `git pull` before checking for updating.
$pull_first=true
# The following properties allows lists in their values. Each entry is separated with ','.
# Single-entry lists will use the first entry as the version.
# Multi-entry lists will attempt to resolve the version with the format of repository,group,name,release/latest
# The repository may begin with '@', referring to any metadata starting with '$repository.', followed with the referenced repository.
# Unintended behaviour may occur if you mix metadata in for repositories.
# Usage of meta provided by the updater.
minecraft_required=$minecraft.required
minecraft_version=$minecraft.target
yarn_mappings=$mappings
loader_version=$loader
# Usage of repo and artifact coordinates in the form of repository,group,name,release/latest
fabric_loader_version=@fabric,net.fabricmc,fabric-loader
fabric_permissions_version=@oss.sonatype,me.lucko,fabric-permissions-api
systemProp.loom_version=@fabric,fabric-loom,fabric-loom.gradle.plugin